{"ast":null,"code":"export const checkBehavior = behavior => {\n  return behavior === undefined || behavior === \"auto\" || behavior === \"instant\" || behavior === \"smooth\";\n};\nexport function elementScrollXY(x, y) {\n  this.scrollLeft = x;\n  this.scrollTop = y;\n}\nexport const failedExecute = function (method, object) {\n  let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cannot convert to dictionary.\";\n  return `Failed to execute '${method}' on '${object}': ${reason}`;\n};\nexport const failedExecuteInvalidEnumValue = (method, object, value) => failedExecute(method, object, `The provided value '${value}' is not a valid enum value of type ScrollBehavior.`);\n/* eslint-disable */\n\nexport const backupMethod = (proto, method, fallback) => {\n  const backup = `__SEAMLESS.BACKUP$${method}`;\n\n  if (!proto[backup] && proto[method] && !proto[method]?.__isPolyfill) {\n    proto[backup] = proto[method];\n  }\n\n  return proto[backup] || fallback;\n};\n/* eslint-enable */\n\nexport const isObject = value => {\n  const type = typeof value;\n  return value !== null && (type === \"object\" || type === \"function\");\n};\nexport const isScrollBehaviorSupported = () => \"scrollBehavior\" in window.document.documentElement.style;\nexport const markPolyfill = method => {\n  Object.defineProperty(method, \"__isPolyfill\", {\n    value: true\n  });\n};\nexport const modifyPrototypes = (prop, func) => {\n  markPolyfill(func);\n  [HTMLElement.prototype, SVGElement.prototype, Element.prototype].forEach(prototype => {\n    backupMethod(prototype, prop);\n    prototype[prop] = func;\n  });\n};\n/**\n * - On Chrome and Firefox, document.scrollingElement will return the <html> element.\n * - Safari, document.scrollingElement will return the <body> element.\n * - On Edge, document.scrollingElement will return the <body> element.\n * - IE11 does not support document.scrollingElement, but you can assume its <html>.\n */\n\nexport const scrollingElement = element => element.ownerDocument.scrollingElement || element.ownerDocument.documentElement;","map":{"version":3,"sources":["/home/kelvin/Desktop/KelvinPichinini.github.io/kelvin-portifolio/node_modules/seamless-scroll-polyfill/src/common.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,aAAa,GAAI,QAAD,IAA8D;AACvF,SAAO,QAAQ,KAAK,SAAb,IAA0B,QAAQ,KAAK,MAAvC,IAAiD,QAAQ,KAAK,SAA9D,IAA2E,QAAQ,KAAK,QAA/F;AACH,CAFM;AAIP,OAAM,SAAU,eAAV,CAAyC,CAAzC,EAAoD,CAApD,EAA6D;AAC/D,OAAK,UAAL,GAAkB,CAAlB;AACA,OAAK,SAAL,GAAiB,CAAjB;AACH;AAED,OAAO,MAAM,aAAa,GAAG,UAAC,MAAD,EAAiB,MAAjB;AAAA,MAAiC,MAAjC,uEAA0C,+BAA1C;AAAA,SACzB,sBAAsB,MAAM,SAAS,MAAM,MAAM,MAAM,EAD9B;AAAA,CAAtB;AAGP,OAAO,MAAM,6BAA6B,GAAG,CAAC,MAAD,EAAiB,MAAjB,EAAiC,KAAjC,KACzC,aAAa,CAAC,MAAD,EAAS,MAAT,EAAiB,uBAAuB,KAAK,qDAA7C,CADV;AAUP;;AACA,OAAO,MAAM,YAAY,GAAiB,CAAC,KAAD,EAAa,MAAb,EAA6B,QAA7B,KAAmD;AACzF,QAAM,MAAM,GAAG,qBAAqB,MAAM,EAA1C;;AAEA,MAAI,CAAC,KAAK,CAAC,MAAD,CAAN,IAAkB,KAAK,CAAC,MAAD,CAAvB,IAAmC,CAAC,KAAK,CAAC,MAAD,CAAL,EAAe,YAAvD,EAAqE;AACjE,IAAA,KAAK,CAAC,MAAD,CAAL,GAAgB,KAAK,CAAC,MAAD,CAArB;AACH;;AAED,SAAO,KAAK,CAAC,MAAD,CAAL,IAAiB,QAAxB;AACH,CARM;AASP;;AAEA,OAAO,MAAM,QAAQ,GAAI,KAAD,IAA4B;AAChD,QAAM,IAAI,GAAG,OAAO,KAApB;AACA,SAAO,KAAK,KAAK,IAAV,KAAmB,IAAI,KAAK,QAAT,IAAqB,IAAI,KAAK,UAAjD,CAAP;AACH,CAHM;AAKP,OAAO,MAAM,yBAAyB,GAAG,MAAe,oBAAoB,MAAM,CAAC,QAAP,CAAgB,eAAhB,CAAgC,KAArG;AAEP,OAAO,MAAM,YAAY,GAAI,MAAD,IAA6B;AACrD,EAAA,MAAM,CAAC,cAAP,CAAsB,MAAtB,EAA8B,cAA9B,EAA8C;AAAE,IAAA,KAAK,EAAE;AAAT,GAA9C;AACH,CAFM;AAMP,OAAO,MAAM,gBAAgB,GAAG,CAC5B,IAD4B,EAE5B,IAF4B,KAGtB;AACN,EAAA,YAAY,CAAC,IAAD,CAAZ;AACA,GAAC,WAAW,CAAC,SAAb,EAAwB,UAAU,CAAC,SAAnC,EAA8C,OAAO,CAAC,SAAtD,EAAiE,OAAjE,CAA0E,SAAD,IAAc;AACnF,IAAA,YAAY,CAAC,SAAD,EAAY,IAAZ,CAAZ;AACA,IAAA,SAAS,CAAC,IAAD,CAAT,GAAkB,IAAlB;AACH,GAHD;AAIH,CATM;AAWP;;;;;AAKG;;AACH,OAAO,MAAM,gBAAgB,GAAI,OAAD,IAC5B,OAAO,CAAC,aAAR,CAAsB,gBAAtB,IAA0C,OAAO,CAAC,aAAR,CAAsB,eAD7D","sourcesContent":["export const checkBehavior = (behavior?: string): behavior is undefined | ScrollBehavior => {\n    return behavior === undefined || behavior === \"auto\" || behavior === \"instant\" || behavior === \"smooth\";\n};\n\nexport function elementScrollXY(this: Element, x: number, y: number): void {\n    this.scrollLeft = x;\n    this.scrollTop = y;\n}\n\nexport const failedExecute = (method: string, object: string, reason = \"cannot convert to dictionary.\"): string =>\n    `Failed to execute '${method}' on '${object}': ${reason}`;\n\nexport const failedExecuteInvalidEnumValue = (method: string, object: string, value: string): string =>\n    failedExecute(method, object, `The provided value '${value}' is not a valid enum value of type ScrollBehavior.`);\n\ninterface BackupMethod {\n    <K extends keyof Element>(proto: Element, method: K): Element[K] | undefined;\n    <K extends keyof Element>(proto: Element, method: K, fallback: unknown): Element[K];\n    <K extends keyof Window>(proto: Window, method: K): Window[K] | undefined;\n    <K extends keyof Window>(proto: Window, method: K, fallback: unknown): Window[K];\n}\n\n/* eslint-disable */\nexport const backupMethod: BackupMethod = (proto: any, method: string, fallback?: unknown) => {\n    const backup = `__SEAMLESS.BACKUP$${method}`;\n\n    if (!proto[backup] && proto[method] && !proto[method]?.__isPolyfill) {\n        proto[backup] = proto[method];\n    }\n\n    return proto[backup] || fallback;\n};\n/* eslint-enable */\n\nexport const isObject = (value: unknown): boolean => {\n    const type = typeof value;\n    return value !== null && (type === \"object\" || type === \"function\");\n};\n\nexport const isScrollBehaviorSupported = (): boolean => \"scrollBehavior\" in window.document.documentElement.style;\n\nexport const markPolyfill = (method: () => void): void => {\n    Object.defineProperty(method, \"__isPolyfill\", { value: true });\n};\n\ntype Prototype = typeof HTMLElement.prototype | typeof SVGElement.prototype | typeof Element.prototype;\n\nexport const modifyPrototypes = <T extends \"scroll\" | \"scrollTo\" | \"scrollBy\" | \"scrollIntoView\">(\n    prop: T,\n    func: Prototype[T],\n): void => {\n    markPolyfill(func);\n    [HTMLElement.prototype, SVGElement.prototype, Element.prototype].forEach((prototype) => {\n        backupMethod(prototype, prop);\n        prototype[prop] = func;\n    });\n};\n\n/**\n * - On Chrome and Firefox, document.scrollingElement will return the <html> element.\n * - Safari, document.scrollingElement will return the <body> element.\n * - On Edge, document.scrollingElement will return the <body> element.\n * - IE11 does not support document.scrollingElement, but you can assume its <html>.\n */\nexport const scrollingElement = (element: Element): Element =>\n    element.ownerDocument.scrollingElement || element.ownerDocument.documentElement;\n"]},"metadata":{},"sourceType":"module"}